shiny::runApp()
runApp('~/Desktop/MM_Shiny/tabs')
# a data.frame that contains all the expressed mutations
exp_mut = data.frame(fread("/Users/alan/Desktop/MM_Shiny/data/exp_muts/all-samples.filtered.expressed-mutations.tsv",
sep = "\t", header = TRUE, quote = "", drop = "Number"))
cols = c("Hugo_Symbol", "Chromosome", "Start_Position", "End_Position", "Strand", "Variant_Classification",
"Variant_Type", "Reference_Allele", "Tumor_Seq_Allele1", "Tumor_Seq_Allele2", "Refseq_mRNA_Id",
"Tumor_Sample_Barcode", "dbSNP_RS", "Genome_Change", "cDNA_Change", "Codon_Change",
"Protein_Change", "Description", "CGC_Name", "CGC_Cancer_Somatic_Mut", "CGC_Cancer_Germline_Mut")
# a data.frame that contains all the expressed mutations
exp_mut = data.frame(fread("/Users/alan/Desktop/MM_Shiny/data/exp_muts/all-samples.filtered.expressed-mutations.tsv",
sep = "\t", header = TRUE, quote = "", drop = "Number"))
# a maf object that contains all the expressed mutations
exp_maf <- read.maf(exp_mut)
# filter the expressed mutations and keep the essential ones
exp_mut = exp_mut[, names(exp_mut) %in% cols]
# a data.frame object that contains SNVs
gatk_df = read_feather("/Users/alan/Desktop/MM_Shiny/data/SNVs/gatk-funcotator-snakemake.feather")
# a maf object that contains all the SNVs
gatk_maf = read.maf(gatk_df)
# filter the SNVs and keep essential ones
gatk_df = subset(gatk_df, select = names(gatk_df) %in% cols)
View(exp_maf)
View(exp_maf)
View(exp_maf)
View(gatk_df)
# a data.frame object that contains SNVs
gatk_df = read_feather("/Users/alan/Desktop/MM_Shiny/data/SNVs/gatk-funcotator-snakemake.feather")
# a maf object that contains all the SNVs
gatk_maf = read.maf(gatk_df)
View(gatk_maf)
View(exp_maf)
exp_mut
class(exp_mut)
exp_mut$Hugo_Symbol
class(exp_mut$Hugo_Symbol)
setdiff(c('a', 'b', 'c', 'd'), c('b', 'c'))
tmb(exp_mut)
class(exp_maf)
View(exp_maf)
exp_maf$data
exp_maf
getFields(laml)
getFields(exp_maf)
exp_maf
exp_maf@data
exp_maf@data[["Hugo_Symblo"]]
exp_maf@data[["Hugo_Symbol"]]
class(exp_maf@data[["Hugo_Symbol"]])
?scale_fill_
?scale_fill
?scale_fill_
# your code goes below this line (make sure to edit comment)
# ggplot(data = weight_by_diet, mapping = aes(x = Diet, y = mean_weight)) +
#   geom_bar(aes(fill = Diet), stat = "identity") +
ggplot(data = ChickWeight, mapping = aes(x = Diet, y = weight)) +
# color the barplot by diet by mapping
geom_bar(aes(fill = Diet), stat = "summary", fun = "mean") +
scale_y_continuous(name = "Mean Weight (grams)", breaks = seq(0, 150, 25)) +
ggtitle("Barplot of mean weight for individual diet") + # title
# add error bars showing + or - 1 SE
# make the error-bars skinnier
geom_errorbar(stat = "summary", fun.data = "mean_se", width = 0.5) +
scale_fill_brewer(palette = "Oranges")
library(ggplot2)
# your code goes below this line (make sure to edit comment)
# ggplot(data = weight_by_diet, mapping = aes(x = Diet, y = mean_weight)) +
#   geom_bar(aes(fill = Diet), stat = "identity") +
ggplot(data = ChickWeight, mapping = aes(x = Diet, y = weight)) +
# color the barplot by diet by mapping
geom_bar(aes(fill = Diet), stat = "summary", fun = "mean") +
scale_y_continuous(name = "Mean Weight (grams)", breaks = seq(0, 150, 25)) +
ggtitle("Barplot of mean weight for individual diet") + # title
# add error bars showing + or - 1 SE
# make the error-bars skinnier
geom_errorbar(stat = "summary", fun.data = "mean_se", width = 0.5) +
scale_fill_brewer(palette = "Oranges")
# your code goes below this line (make sure to edit comment)
# How many distinct chicks are there?
# distinct the dataset by Time, which indirectly distinct the Chick label
# as well
# length() to report the number of distinct Chicks involved in the study
length(ChickWeight[ChickWeight$Time == 0, ]$Chick)
# How many distinct time points?
# table() counts the frequency of Time in the table, which indirectly
# categorizes the Time variable
# length() returns the number of columns in the table, namely the
# distinct time points
length(table(ChickWeight$Time))
# How many distinct diet conditions?
# table() counts the frequency of Diet in the table, which indirectly
# categorizes the Diet variable
# length() returns the number of columns in the table, namely the
# distinct Diet conditions
length(table(ChickWeight$Diet))
# How many chicks per diet condition?
# condense the days into Time = 0, this yields unique observations
# for each chick
# table(Time = 0, Diet) give the contingency table, which counts
# the number of chicks for each diet condtion
table(ChickWeight[ChickWeight$Time == 0, ]$Time,
ChickWeight[ChickWeight$Time == 0, ]$Diet)
# your code goes below this line (make sure to edit comment)
# what we have from question 8
ggplot(data = ChickWeight, mapping = aes(x = Diet, y = weight)) +
# add error bars showing + or - 1 SE
# make the error-bars skinnier
geom_errorbar(stat = "summary", fun.data = "mean_se", width = 0.5) +
# make the points larger
# color the points to red
# put points on top of the error bars
geom_point(aes(fill = Diet), stat = "summary", fun = "mean", size = 5, color = "red") +
# label the y-axis
scale_y_continuous(name = "Mean Weight (grams)") +
# title
ggtitle("Barplot of mean weight for individual diet")
shiny::runApp()
install.packages("reactable")
library(reactable)
reactable(exp_mut)
# a data.frame that contains all the expressed mutations
exp_mut = data.frame(fread("/Users/alan/Desktop/MM_Shiny/data/exp_muts/all-samples.filtered.expressed-mutations.tsv", sep = "\t", header = TRUE, quote = "", drop = "Number"))
# filter the expressed mutations and keep the essential ones
exp_mut = exp_mut[, names(exp_mut) %in% cols]
# a maf object that contains all the expressed mutations
exp_maf <- read.maf(exp_mut)
reactable(exp_mut)
exp_maf@data
exp_maf@data[["Hugo_Symbol"]]
exp_maf@data[["Hugo_Symbols"]]
subsetMaf(maf = exp_maf, genes = setdiff(exp_maf@data[["Hugo_Symbol"]], c("KRAS")))
subsetMaf(maf = exp_maf, genes = setdiff(exp_maf@data[["Hugo_Symbol"]], c("KRAS")))
tmb(subsetMaf(maf = exp_maf, genes = setdiff(exp_maf@data[["Hugo_Symbol"]], c("KRAS"))))
reactable(tmb(subsetMaf(maf = exp_maf, genes = setdiff(exp_maf@data[["Hugo_Symbol"]], c("KRAS")))))
data.table(tmb(subsetMaf(maf = exp_maf, genes = setdiff(exp_maf@data[["Hugo_Symbol"]], c("KRAS")))))
data.table(tmb(subsetMaf(maf = exp_maf, genes = setdiff(exp_maf@data[["Hugo_Symbol"]], c("KRAS")))))
exp_maf@data[["Hugo_Symbols"]]
data.table(tmb(subsetMaf(maf = exp_maf, genes = setdiff(exp_maf@data[["Hugo_Symbol"]], c("KRAS")))))
runApp()
data.table(tmb(exp_maf) - tmb(subsetMaf(maf = exp_maf, genes = setdiff(exp_maf@data[["Hugo_Symbol"]], c("KRAS")))))
tmb(exp_maf)
data.table(tmb(exp_maf)[, 3:4] - tmb(subsetMaf(maf = exp_maf, genes = setdiff(exp_maf@data[["Hugo_Symbol"]], c("KRAS")))))
data.table(tmb(exp_maf)[, 3:4] - tmb(subsetMaf(maf = exp_maf, genes = setdiff(exp_maf@data[["Hugo_Symbol"]], c("KRAS"))))[, 3:4])
data.table(tmb(exp_maf)[, 3:4] - tmb(subsetMaf(maf = exp_maf, genes = setdiff(exp_maf@data[["Hugo_Symbol"]], c("KRAS"))))[, 3:4])
data.table(tmb(exp_maf)[, 3:4] - tmb(subsetMaf(maf = exp_maf, genes = setdiff(exp_maf@data[["Hugo_Symbol"]], c("KRAS"))))[, 3:4])
data.table(tmb(exp_maf) - tmb(subsetMaf(maf = exp_maf, genes = setdiff(exp_maf@data[["Hugo_Symbol"]], c("KRAS")))))
class(tmb(exp_maf))
head(tmb(exp_maf))
is.numeric(tmb(exp_maf))
is.na(tmb(exp_maf))
is.factor(tmb(exp_maf))
is.factor(colnames(tmb(exp_maf)))
clear
data.table(tmb(exp_maf) - tmb(subsetMaf(maf = exp_maf, genes = setdiff(exp_maf@data[["Hugo_Symbol"]], c("KRAS")))))
?tmb
tmb(exp_maf) - tmb(subsetMaf(maf = exp_maf, genes = setdiff(exp_maf@data[["Hugo_Symbol"]], c("KRAS"))))
tmb(subsetMaf(maf = exp_maf, genes = setdiff(exp_maf@data[["Hugo_Symbol"]], c("KRAS"))))
tmb(exp_maf)
# a data.frame object that contains SNVs
gatk_df = read_feather("/Users/alan/Desktop/MM_Shiny/data/SNVs/gatk-funcotator-snakemake.feather")
# filter the SNVs and keep essential ones
gatk_df = subset(gatk_df, select = names(gatk_df) %in% cols)
# a maf object that contains all the SNVs
gatk_maf = read.maf(gatk_df)
tmb(gatk_mad)
tmb(gatk_maf)
sort(tmb(gatk_maf))
sort(tmb(gatk_maf)[, 1])
tmb(gatk_maf)[1]
tmb(gatk_maf)[,1]
class(tmb(gatk_maf)[,1])
sort(tmb(gatk_maf)[,1])
tmb(gatk_maf)[,1]
tmb(exp_maf)
tmb(gatk_mad)
tmb(gatk_maf)
class(tmb(gatk_maf))
merge
?merge
merge(tmb(gatk_maf), tmb(exp_maf))
tmb(gatk_maf)
merge(tmb(gatk_maf), tmb(exp_maf), by = Tumor_Sample_Barcode)
merge(tmb(gatk_maf), tmb(exp_maf), by = "Tumor_Sample_Barcode")
?merge
merge(tmb(gatk_maf), tmb(exp_maf), by = "Tumor_Sample_Barcode", all = T)
?merge
subsetMaf(maf = exp_maf, genes = setdiff(exp_maf@data[["Hugo_Symbol"]], c("KRAS")
?merge
library(shiny)
library(arrow)
runApp()
